<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.dao.VoteRewardCountMapper">
  <resultMap id="BaseResultMap" type="com.example.demo.entity.VoteRewardCount">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="baseReward" jdbcType="INTEGER" property="basereward" />
    <result column="plusReward" jdbcType="INTEGER" property="plusreward" />
    <result column="totalReward" jdbcType="INTEGER" property="totalreward" />
    <result column="voteNum" jdbcType="INTEGER" property="votenum" />
    <result column="nextTime" jdbcType="TIMESTAMP" property="nexttime" />
    <result column="voteTime" jdbcType="TIMESTAMP" property="votetime" />
    <result column="Successful" jdbcType="INTEGER" property="successful" />
    <result column="Reason" jdbcType="VARCHAR" property="reason" />
    <result column="VoterIP" jdbcType="VARCHAR" property="voterip" />
    <result column="uniqueid" jdbcType="VARCHAR" property="uniqueid" />
    <result column="Status" jdbcType="INTEGER" property="status"/>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, name, baseReward, plusReward, totalReward, voteNum, nextTime, voteTime, Successful, 
    Reason, VoterIP, uniqueid,Status
  </sql>
  <select id="selectByExample" parameterType="com.example.demo.entity.VoteRewardCountExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from vote_reward_count
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from vote_reward_count
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from vote_reward_count
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.example.demo.entity.VoteRewardCountExample">
    delete from vote_reward_count
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.demo.entity.VoteRewardCount">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into vote_reward_count (name, baseReward, plusReward, 
      totalReward, voteNum, nextTime, 
      voteTime, Successful, Reason, 
      VoterIP, uniqueid,Status)
    values (#{name,jdbcType=VARCHAR}, #{basereward,jdbcType=INTEGER}, #{plusreward,jdbcType=INTEGER}, 
      #{totalreward,jdbcType=INTEGER}, #{votenum,jdbcType=INTEGER}, #{nexttime,jdbcType=TIMESTAMP}, 
      #{votetime,jdbcType=TIMESTAMP}, #{successful,jdbcType=INTEGER}, #{reason,jdbcType=VARCHAR}, 
      #{voterip,jdbcType=VARCHAR}, #{uniqueid,jdbcType=VARCHAR},#{status,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.example.demo.entity.VoteRewardCount">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into vote_reward_count
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        name,
      </if>
      <if test="basereward != null">
        baseReward,
      </if>
      <if test="plusreward != null">
        plusReward,
      </if>
      <if test="totalreward != null">
        totalReward,
      </if>
      <if test="votenum != null">
        voteNum,
      </if>
      <if test="nexttime != null">
        nextTime,
      </if>
      <if test="votetime != null">
        voteTime,
      </if>
      <if test="successful != null">
        Successful,
      </if>
      <if test="reason != null">
        Reason,
      </if>
      <if test="voterip != null">
        VoterIP,
      </if>
      <if test="uniqueid != null">
        uniqueid,
      </if>
        <if test="Status!=null">
          Status
        </if>

    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="basereward != null">
        #{basereward,jdbcType=INTEGER},
      </if>
      <if test="plusreward != null">
        #{plusreward,jdbcType=INTEGER},
      </if>
      <if test="totalreward != null">
        #{totalreward,jdbcType=INTEGER},
      </if>
      <if test="votenum != null">
        #{votenum,jdbcType=INTEGER},
      </if>
      <if test="nexttime != null">
        #{nexttime,jdbcType=TIMESTAMP},
      </if>
      <if test="votetime != null">
        #{votetime,jdbcType=TIMESTAMP},
      </if>
      <if test="successful != null">
        #{successful,jdbcType=INTEGER},
      </if>
      <if test="reason != null">
        #{reason,jdbcType=VARCHAR},
      </if>
      <if test="voterip != null">
        #{voterip,jdbcType=VARCHAR},
      </if>
      <if test="uniqueid != null">
        #{uniqueid,jdbcType=VARCHAR},
      </if>
      <if test="Status!=null">
        #{status,jdbcType=INTEGER}
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.demo.entity.VoteRewardCountExample" resultType="java.lang.Long">
    select count(*) from vote_reward_count
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update vote_reward_count
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.basereward != null">
        baseReward = #{record.basereward,jdbcType=INTEGER},
      </if>
      <if test="record.plusreward != null">
        plusReward = #{record.plusreward,jdbcType=INTEGER},
      </if>
      <if test="record.totalreward != null">
        totalReward = #{record.totalreward,jdbcType=INTEGER},
      </if>
      <if test="record.votenum != null">
        voteNum = #{record.votenum,jdbcType=INTEGER},
      </if>
      <if test="record.nexttime != null">
        nextTime = #{record.nexttime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.votetime != null">
        voteTime = #{record.votetime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.successful != null">
        Successful = #{record.successful,jdbcType=INTEGER},
      </if>
      <if test="record.reason != null">
        Reason = #{record.reason,jdbcType=VARCHAR},
      </if>
      <if test="record.voterip != null">
        VoterIP = #{record.voterip,jdbcType=VARCHAR},
      </if>
      <if test="record.uniqueid != null">
        uniqueid = #{record.uniqueid,jdbcType=VARCHAR},
      </if>
      <if test="record.Status != null">
        Status =#{record.status,jdbcType=INTEGER}
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update vote_reward_count
    set id = #{record.id,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      baseReward = #{record.basereward,jdbcType=INTEGER},
      plusReward = #{record.plusreward,jdbcType=INTEGER},
      totalReward = #{record.totalreward,jdbcType=INTEGER},
      voteNum = #{record.votenum,jdbcType=INTEGER},
      nextTime = #{record.nexttime,jdbcType=TIMESTAMP},
      voteTime = #{record.votetime,jdbcType=TIMESTAMP},
      Successful = #{record.successful,jdbcType=INTEGER},
      Reason = #{record.reason,jdbcType=VARCHAR},
      VoterIP = #{record.voterip,jdbcType=VARCHAR},
      uniqueid = #{record.uniqueid,jdbcType=VARCHAR},
      Status = #{record.status,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.demo.entity.VoteRewardCount">
    update vote_reward_count
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="basereward != null">
        baseReward = #{basereward,jdbcType=INTEGER},
      </if>
      <if test="plusreward != null">
        plusReward = #{plusreward,jdbcType=INTEGER},
      </if>
      <if test="totalreward != null">
        totalReward = #{totalreward,jdbcType=INTEGER},
      </if>
      <if test="votenum != null">
        voteNum = #{votenum,jdbcType=INTEGER},
      </if>
      <if test="nexttime != null">
        nextTime = #{nexttime,jdbcType=TIMESTAMP},
      </if>
      <if test="votetime != null">
        voteTime = #{votetime,jdbcType=TIMESTAMP},
      </if>
      <if test="successful != null">
        Successful = #{successful,jdbcType=INTEGER},
      </if>
      <if test="reason != null">
        Reason = #{reason,jdbcType=VARCHAR},
      </if>
      <if test="voterip != null">
        VoterIP = #{voterip,jdbcType=VARCHAR},
      </if>
      <if test="uniqueid != null">
        uniqueid = #{uniqueid,jdbcType=VARCHAR},
      </if>
      <if test="status !=null">
        Status = #{status,jdbcType=INTEGER}
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.demo.entity.VoteRewardCount">
    update vote_reward_count
    set name = #{name,jdbcType=VARCHAR},
      baseReward = #{basereward,jdbcType=INTEGER},
      plusReward = #{plusreward,jdbcType=INTEGER},
      totalReward = #{totalreward,jdbcType=INTEGER},
      voteNum = #{votenum,jdbcType=INTEGER},
      nextTime = #{nexttime,jdbcType=TIMESTAMP},
      voteTime = #{votetime,jdbcType=TIMESTAMP},
      Successful = #{successful,jdbcType=INTEGER},
      Reason = #{reason,jdbcType=VARCHAR},
      VoterIP = #{voterip,jdbcType=VARCHAR},
      uniqueid = #{uniqueid,jdbcType=VARCHAR},
      Status = #{status,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>